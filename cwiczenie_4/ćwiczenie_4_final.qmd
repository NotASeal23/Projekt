---
title: "Ćwiczenie 4"
format: 
  html:
    self-contained: true
    theme:
      light: cosmo
      dark: darkly
    fontsize: 1.0em
    toc: true
    toc-location: left
    toc-title: "Spis tresci"
    number-sections: true
    code-fold: show 
    code-summary: "Ukryj/Pokaz kod"
    code-tools: true
    code-block-bg: "lightgrey"
    code-block-border-left: "black" 
    code-line-numbers: true
    code-copy: false
editor: visual
author: "Gabriel Rączkowski 416529"
editor_options: 
  chunk_output_type: console
execute:
  warning: false
  echo: true
  error: false
---

```{r}
#| message: false
#| warning: false
#| echo: false
#include
library(tidymodels) 
library(skimr) 
library(GGally) 
library(openair) 
library(DT) 
library(dplyr)
library(ranger)
tidymodels_prefer()
library(tidymodels)

library(rpart.plot)  
library(vip)        
```

### Data Processing

```{r}
air <- mydata |> selectByDate(year = 2004) 
air <- air |> na.omit()

air <-
  air |>
  mutate(ozone = cut(
    o3,
    breaks = c(-0.1, 10, 42),
    labels = c("Niskie", "Wysokie")
  ))


set.seed(222)
data_split <- initial_split(data = air, prop = 3/4, strata = ozone)
train_data <- training(data_split)
test_data <-  testing(data_split)

air_recipe <-
  recipe(ozone ~ ., data = train_data) |>
  update_role(date, o3, new_role = "ID") |>  
  step_date(date, features = c("month"))  |> 
  step_dummy(all_nominal_predictors()) |> 
  step_zv(all_predictors())

```

### Creating Work and Fitting Model

```{r}
tune_spec <- 
  decision_tree(
    cost_complexity = tune(), 
    tree_depth = tune()) |> 
  set_engine("rpart") |> 
  set_mode("classification")


siatka <- grid_regular(cost_complexity(), 
                       tree_depth(), 
                       levels = 5)



siatka
set.seed(234)
folds <- vfold_cv(train_data)

tune_work  <- 
  workflow() |> 
  add_model(tune_spec) |> 
  add_recipe(air_recipe)


miary_oceny <-
  yardstick::metric_set(
    accuracy,
    mcc,
    npv,
    roc_auc)

fit_tree <-
  tune_work |>
  tune_grid(
    resamples = folds,
    grid = siatka,
    metrics = miary_oceny
  )

fit_tree
fit_tree |> collect_metrics()
```

```{r}
#| echo: false

fit_tree %>%
  collect_metrics() %>%
  mutate(tree_depth = factor(tree_depth)) %>%
  ggplot(aes(cost_complexity, mean, color = tree_depth)) +
  geom_line(size = 1.5, alpha = 0.6) +
  geom_point(size = 2) +
  facet_wrap(~ .metric, scales = "free", nrow = 2) +
  scale_x_log10(labels = scales::label_number()) +
  scale_color_viridis_d(option = "plasma", begin = .9, end = 0)
```

### Fit model

```{r}
fit_tree |> show_best(metric = "accuracy")
fit_tree |> show_best(metric = "mcc")
fit_tree |> show_best(metric = "roc_auc")
fit_tree |> show_best(metric = "npv")

best_mod <- fit_tree |> select_best(metric = "accuracy")

final_mod <-  
  tune_work |> 
  finalize_workflow(best_mod)

final_fit <- 
  final_mod |> 
  last_fit(split = data_split)

final_fit %>%
  collect_metrics()

final_fit |> 
  collect_predictions() |> 
  roc_curve(truth = ozone, .pred_Niskie) |> 
  autoplot()

final_fit |> 
  extract_workflow() |> 
  extract_fit_engine() |> 
  rpart.plot(roundint = F)

final_fit |> 
  extract_workflow() |> 
  extract_fit_parsnip() |>
  vip() 

final_fit |>
  extract_workflow() |>
  extract_fit_parsnip() |>
  vip() |> 
  _$data |> 
  knitr::kable(digits = 1)

```

Najlepsze wyniki dla tree_depth = 8 i cost_complexity = 0.000562


### Dostosowywanie hiperparametrów
Argumenty decision tree:

```{r}
args(decision_tree)


```
Spróbujemy dostosawać także inne parametry
```{r}
tune_spec2 <- 
  decision_tree(
    cost_complexity = tune(), 
    tree_depth = tune(),
    min_n = tune()
    ) |> 
  set_engine("rpart") |> 
  set_mode("classification")



siatka2 <- grid_regular(cost_complexity(), 
                       tree_depth(),
                       min_n(),
                       levels = 3)

folds2 <- vfold_cv(train_data)

tune_work2  <- 
  workflow() |> 
  add_model(tune_spec2) |> 
  add_recipe(air_recipe)


miary_oceny2 <-
  yardstick::metric_set(
    accuracy,
    mcc,
    npv,
    roc_auc)

fit_tree2 <-
  tune_work2 |>
  tune_grid(
    resamples = folds2,
    grid = siatka2,
    metrics = miary_oceny2
  )

fit_tree2
fit_tree2 |> collect_metrics()

fit_tree |> show_best(metric = "accuracy")
fit_tree |> show_best(metric = "mcc")
fit_tree |> show_best(metric = "roc_auc")
fit_tree |> show_best(metric = "npv")


best_mod <- fit_tree |> select_best(metric = "accuracy")

final_mod <-  
  tune_work |> 
  finalize_workflow(best_mod)

final_fit <- 
  final_mod |> 
  last_fit(split = data_split)

final_fit %>%
  collect_metrics()

final_fit |> 
  collect_predictions() |> 
  roc_curve(truth = ozone, .pred_Niskie) |> 
  autoplot()

final_fit |> 
  extract_workflow() |> 
  extract_fit_engine() |> 
  rpart.plot(roundint = F)

final_fit |> 
  extract_workflow() |> 
  extract_fit_parsnip() |>
  vip() 

final_fit |>
  extract_workflow() |>
  extract_fit_parsnip() |>
  vip() |> 
  _$data |> 
  knitr::kable(digits = 1)
```
Najlepsze wyniki dla min_n = 21, tree_depth = 8, cost_complexity = 1*e-10