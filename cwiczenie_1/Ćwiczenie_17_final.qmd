---
title: "Ćwiczenie 1.7"
format: html
editor: visual
author: "Gabriel Rączkowski 416529"
self-contained: true
editor_options: 
  chunk_output_type: console
---

Bardzo mało zastosowań yaml, proszę się przyłożyć. Szczególnie, że generuje się html, przyjrzyj się dokładnie temu co wysłałem na teams.

Nie ma żadnych ustawień `chunk`, ani globalnie, ani lokalnie.

```{r}
#| message: false
#| warning: false

library(tidymodels)
library(parsnip)
library(rstanarm)
library(readr)      
library(broom.mixed) 
library(dotwhisker)  
```

```{r}
colnames(airquality) <- tolower(colnames(airquality))
data = airquality

corc <-
  airquality |>
  as_tibble() |>
  na.omit() |> 
  select(-c(day)) 
cor(corc) # sprawdzam korelacje, aby usunąć ewentualne skorelowane czynniki

```

```{r}

data <-
  airquality |>
  as_tibble() |>
  na.omit() |> 
  select(-day) |> 
  mutate(month = factor(month)) 


data %>%
  ggplot(aes(
    x = temp,
    y = ozone,
    col = month,
    group = month
  )) +
  geom_point() +
  geom_smooth(method = lm, se = F) +
  scale_color_viridis_d(option = "C", end = .9)

glimpse(data)

data = as.data.frame(data)
GGally::ggpairs(data)
```

Interesuj mnie dlaczego inny pakiet dla podziału danych ? Nie mam nic przeciwko nowym rozwiązaniom. Nie znam tego pakietu będę wdzięczny za jakieś uzasadnienie. Miłe, że napisał to Polak.

```{r}
mask = caTools::sample.split(t(data[,1]),SplitRatio = 3/4)
data_train = data[mask,] # ~83 okolo 83 danych
data_test = data[!mask,] # ~28 -||-

lm_mod <- 
  linear_reg() |> 
  set_engine("lm") #uzywamy lm, jest to metoda najmniejszych kwadratow

#robimy model
lm_fit <-  
  lm_mod |>
  fit(ozone ~ temp + solar.r + wind + month, data = data_train) #nie uwzględniamy interakcji miedzy zmiennymi
lm_fit 

lm_fit$fit |> summary() #miesiące mają mały wpływ na ozone
```

Opracowany model zawiera zmienne nieistotne. Proszę opracować model, którego zmienne są istotne.

```{r}

new_data = data_test |> 
  select(-`ozone`)
#przewidujemy dane testowe na podstawie modelu
predicted = predict(lm_fit,new_data = new_data)

blad_sr_kw = sqrt(mean(t(predicted) - data_test$`ozone`)^2)

data_final = data.frame(
                        ozone = data_test$ozone,
                        solar.r = data_test$solar.r,
                        wind = data_test$wind,
                        temp = data_test$temp,
                        month = data_test$month,
                        pred = predicted)

data_final



ggplot(data_final,mapping = aes(x= .pred ,y=ozone ))+geom_point()+
  geom_smooth(method = "lm",se = FALSE)+
  facet_wrap(~month)


ggplot(data_final,mapping = aes(x= .pred ,y=ozone ))+geom_point()+
  geom_smooth(method = "lm",se = FALSE)
```

Do błędów proponuje pakiet

```{r}
test <- augment(lm_fit, new_data = data_test) 

# Prosty przykład 
test |> 
  group_by(month) |> 
  yardstick::rmse(ozone, .pred)

# wybór wiely metryk
# patrz: https://yardstick.tidymodels.org/articles/metric-types.html

multi <- metric_set(mae, rmse, rsq, rsq_trad)

# Zobacz jakie to proste 
test |> 
  group_by(month) |> 
  multi(ozone, .pred) |> 
  pivot_wider(names_from = .metric, values_from = .estimate)


```
